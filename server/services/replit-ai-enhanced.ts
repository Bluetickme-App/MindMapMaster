import { promises as fs } from 'fs';
import path from 'path';
import { multiAIService } from './multi-ai-provider';

export interface GeneratedProject {
  name: string;
  path: string;
}

export interface AIAssistRequest {
  code: string;
  language: string;
  action: 'explain' | 'fix' | 'add-feature';
  mode: 'basic' | 'advanced';
  context?: Record<string, string>;
  userId?: number;
}

export interface UsageStats {
  agentTasks: number;
  assistantTasks: number;
  totalCost: number;
}

export class ReplitAIEnhancedSystem {
  private readonly usage: Map<number, UsageStats> = new Map();

  async createAppFromDescription(description: string, userId: number): Promise<{ project: GeneratedProject; checkpoint: null; effort: number; cost: number; }> {
    const schema = {
      type: 'object',
      properties: {
        appName: { type: 'string' },
        html: { type: 'string' },
        server: { type: 'string' }
      },
      required: ['appName', 'html', 'server'],
      additionalProperties: false
    } as const;

    const systemPrompt = 'You are an expert full-stack developer. Provide production-ready TypeScript Express server code that serves the supplied HTML.';
    const prompt = `Create a minimal full-stack application based on this description: "${description}"`;

    const aiResponse = await multiAIService.generateStructuredResponse('openai', prompt, systemPrompt, schema);

    const appName = aiResponse.appName ?? 'AI Generated App';
    const htmlContent = aiResponse.html ?? `<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <title>${appName}</title>\n</head>\n<body>\n  <h1>${description}</h1>\n  <p>Generated by AI.</p>\n</body>\n</html>`;
    const serverContent = aiResponse.server ?? `import express from 'express';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(express.static('public'));\n\napp.listen(port, () => {\n  console.log('Server running on port ' + port);\n});`;

    const projectSlug = appName.toLowerCase().replace(/\s+/g, '-');
    const projectDir = path.join(process.cwd(), 'workspace-demo', projectSlug);

    await fs.mkdir(path.join(projectDir, 'public'), { recursive: true });
    await fs.mkdir(path.join(projectDir, 'src'), { recursive: true });

    await fs.writeFile(path.join(projectDir, 'public', 'index.html'), htmlContent, 'utf8');
    await fs.writeFile(path.join(projectDir, 'src', 'server.ts'), serverContent, 'utf8');

    const packageJson = {
      name: projectSlug,
      version: '1.0.0',
      type: 'module',
      scripts: {
        dev: 'tsx src/server.ts',
        start: 'node build/server.js'
      },
      dependencies: {
        express: '^4.21.2'
      },
      devDependencies: {
        tsx: '^4.19.1'
      }
    };

    await fs.writeFile(path.join(projectDir, 'package.json'), JSON.stringify(packageJson, null, 2), 'utf8');

    const tsconfig = {
      compilerOptions: {
        target: 'ES2020',
        module: 'ESNext',
        moduleResolution: 'node',
        esModuleInterop: true,
        strict: true,
        skipLibCheck: true
      }
    };

    await fs.writeFile(path.join(projectDir, 'tsconfig.json'), JSON.stringify(tsconfig, null, 2), 'utf8');

    this.incrementUsage(userId, 'agent', 0);

    return {
      project: { name: appName, path: projectDir },
      checkpoint: null,
      effort: 1,
      cost: 0
    };
  }

  async assistWithCode(request: AIAssistRequest): Promise<{ result: string; mode: string; cost: number; }> {
    const { code, language, action, mode, context, userId = 0 } = request;
    const systemPrompt = `You are an expert ${language} developer providing clear, concise assistance.`;

    let prompt: string;
    switch (action) {
      case 'explain':
        prompt = `Explain the following ${language} code:\n\n${code}`;
        break;
      case 'fix':
        prompt = `Fix any issues in the following ${language} code and return the corrected version:\n\n${code}`;
        break;
      case 'add-feature':
        prompt = `Update the following ${language} code to implement this feature: ${context?.featureDescription}.\n\n${code}`;
        break;
      default:
        prompt = code;
    }

    const response = await multiAIService.generateResponse('openai', prompt, systemPrompt);

    const cost = mode === 'advanced' ? 0.05 : 0;
    this.incrementUsage(userId, 'assistant', cost);

    return {
      result: response.content,
      mode,
      cost
    };
  }

  async getUsageStats(userId: number): Promise<UsageStats & { totalTasks: number }> {
    const stats = this.usage.get(userId) ?? { agentTasks: 0, assistantTasks: 0, totalCost: 0 };
    return { ...stats, totalTasks: stats.agentTasks + stats.assistantTasks };
  }

  private incrementUsage(userId: number, type: 'agent' | 'assistant', cost: number): void {
    const current = this.usage.get(userId) ?? { agentTasks: 0, assistantTasks: 0, totalCost: 0 };
    if (type === 'agent') {
      current.agentTasks += 1;
    } else {
      current.assistantTasks += 1;
    }
    current.totalCost += cost;
    this.usage.set(userId, current);
  }
}

export const replitAIEnhanced = new ReplitAIEnhancedSystem();
